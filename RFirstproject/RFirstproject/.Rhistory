help
help('json')
??json
install.packages("rjson")
.libPaths
.libPaths()
library(jsonlite)
a=12
a
adidas <- fromJSON("https://www.ingturbo.pl/services/underlying/adidas/chart?period=week")
adidas
getIngData = function(symbol, period) {     resource=paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period) }
getIngData("adidas", "week")
getIngData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period)     fromJSON(resource) }
getIngData("adidas", "week")
getIngData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period)     print(resource)     fromJSON(resource) }
getIngData("adidas", "week")
getIngData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) }
getIngData("adidas", "week")
adidasWeek = getIngData("adidas", "week")
adidasWeek = getIngData("adidas", "week")adidasCertIntraday <- getIngData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngData("PLINGNV04713", "intraday") bundCertIntraday <- getIngData("PLINGNV00497 ", "intraday")
adidasCertIntraday <- getIngData("PLINGNV14787", "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/underlying/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497 ", "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday")
adidasCertIntraday
adidasCertIntraday["$BidQuotes"]
adidasCertIntraday[$BidQuotes]
adidasCertIntraday[BidQuotes]
adidasCertIntraday["BidQuotes"]
adidasCertIntraday["AskQuotes"]
adidasBid <- adidasCertIntraday["BidQuotes"][,2]
adidasCertIntraday["BidQuotes"][,2]
adidasCertIntraday["BidQuotes"]
q<-adidasCertIntraday["BidQuotes"]
q
q.BidQuotes
q["BidQuotes"]
q.BidQuotes
q$BidQuotes
adidasBid <- adidasCertIntraday$BidQuotes
adida
adidasBid
adidasAsk <- adid
adidasAsk <- adidasCertIntraday$ AskQuotes
adidasAsk <- adidasCertIntraday$AskQuotes
adidasAs
adidasAsk
adidasAsk[,2]
plot(adidasAsk[,2], type="o", col="green")
plot(adidasAsk[,2], col="green")
plot(adidasAsk[,2], col="green")
plot(adidasAsk[,2], type="l", col="green")
lines(adidasBid[,2], type="l", col="red")
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     plot(certAsk[, 2], type = "o", col = "green")     lines(adidasBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     plot(certAsk[, 2], type = "l", col = "green")     lines(adidasBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     plot(certAsk[, 2], type = "l", col = "green")     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
adida
adi
adida
adidasAsk
adidasAsk[1,]
adidasAsk[,1]
adidasAsk[,1]/1000.0
adidasAsk[,3] <- adidasAsk[,1]/1000.0
adidasAsk[,3] = adidasAsk[,1]/1000.0
adidasAsk[,1]/1000.0
adidasAsk$3 = adidasAsk[,1]/1000.0
adidasAsk$calc = adidasAsk[,1]/1000.0
type(adi)
type(adidasAsk)
typeof(adidasAsk)
typeof(adidasAsk[1,])
adidasAsk[1,]
adidasAsk[,1]
adidasAsk
adidasBid
typeof(adidasBid[1,])
typeof(adidasBid[,1])
typeof(adidasBid)
cars <- c(1, 3, 6, 4, 9)
trucks <- c(2, 5, 4, 5, 12)
g_range <- range(0, cars, trucks)
g_range
range(cars, trucks)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- rnage(certAsk, certBid, ylim = certRange)     plot(certAsk[, 2], type = "l", col = "green")     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid, ylim = certRange)     plot(certAsk[, 2], type = "l", col = "green")     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid)     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid)     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[,2], certBid[,2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("pgn", pgnCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph("bund", bundCertIntraday)
adidasInfo = c("adidas", "PLINGNV14787")
as <- list()
as[[0]]<-0
as[[1]]<-0
initializeData <- function() {     adidasInfo <- c("adidas", "PLINGNV14787")     pgnInfo <- c("pgn", "PLINGNV04713")     pgeInfo <- c("pge", "PLINGNV16725")     bundInfo <- c("bund", "PLINGNV00497")     certItems <- list()     certItems[[1]] <- adidasInfo     certItems[[2]] <- pgnInfo     certItems[[3]] <- pgeInfo     certItems[[4]] <- bundInfo }
initializeData <- function() {     adidasInfo <- c("adidas", "PLINGNV14787")     pgnInfo <- c("pgn", "PLINGNV04713")     pgeInfo <- c("pge", "PLINGNV16725")     bundInfo <- c("bund", "PLINGNV00497")     certItems <- list()     certItems[[1]] <- adidasInfo     certItems[[2]] <- pgnInfo     certItems[[3]] <- pgeInfo     certItems[[4]] <- bundInfo     certItems }
()
initializeData()
drawAllGraphs <- function(itemsList) {     for (i in 1:seq_le(itemsList)) {         print(i)     } }
d <- initializeData()
draw
drawAllGraphs(d)
drawAllGraphs <- function(itemsList) {     for (i in 1:seq_len(itemsList)) {         print(i)     } }
drawAllGraphs(d)
seq_len(d)
d
typeof(d)
d[[1]]
typeof(d[[1]])
x <- d[[1]]
c
x
x[0]
x[1]
x[2]
length(d)
drawAllGraphs <- function(itemsList) {     for (i in 1:length(itemsList)) {         print(i)     } }
drawAllGraphs(d)
is.nu
is.null(d[[1]])
is.null(x)
is.null(x[3])
is.null(x[1])
x[1]
x[2]
x[3]
x[3] <- "k"
x[3] <- null
x[3] <- NULL
x[3] = NULL
typeof(x[4])
z <- c(1, 1, "ll")
zz
z
z <- c(1, 1, ll)
z <- c(1, 1, 11)
z
initializeData <- function() {     adidasInfo <- data.frame("adidas", "PLINGNV14787")     pgnInfo <- data.frame("pgn", "PLINGNV04713")     pgeInfo <- data.frame( "pge", "PLINGNV16725")     bundInfo <- data.frame("bund", "PLINGNV00497")     certItems <- list()     certItems[[1]] <- adidasInfo     certItems[[2]] <- pgnInfo     certItems[[3]] <- pgeInfo     certItems[[4]] <- bundInfo     certItems }
d <- initializeData()
d
d[[4]]
x <- d[[1]]
is.null(x[3])
is.undefined(x[3])
class(x[1])
class(x[2])
typeof(x[2])
typeof(x[1])
x[1]
f=x[1]
typeof(f)
f
f
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems }
d <- initializeData()
d
typeof(d)
typeof(d[1])
typeof(d[[1]])
d[1]
d[,1]
d[1,]
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems }
d[1,]
row=d[1,]
row
typeof(row)
typeof(row)
row
typeof(row)
row[1]
typeof(row[1])
typeof(row[1,])
row[1]
(row[1])[1]
row[2]
row[3]
names(row)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     values <- c(NULL, NULL, NULL, NULL)     certItems <- data.frame(titles, certs)     certItems }
d=initializeData()
d
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     values <- c(NULL, NULL, NULL, NULL)     certItems <- data.frame(titles, certs, values)     certItems }
d=initializeData()
as=123
as
$("as")
get("as")
set("as", 456)
assign("as", 456)
as
adidasAsk
assign("as", adidasAsk)
as
remove(as)
as
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems }
assign("asstest", d)
asstest
exists("asstest")
remove("asstest")
exists("asstest")
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } drawAllGraphs <- function(itemsList, period) {     for (i in 1:length(itemsList)) {         currentItem = items[[i]]         print(currentItem)         currentItemData <- getIngCertData(currentItem.certs, period)     } }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } drawAllGraphs <- function(itemsList, period) {     for (i in 1:length(itemsList)) {         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } } d <- initializeData() drawAllGraphs(d, "intraday") #drawCertGraph("adidas", adidasCertIntraday) #drawCertGraph("pgn", pgnCertIntraday) #drawCertGraph("pge", pgeCertIntraday) #drawCertGraph("bund", bundCertIntraday)
drawAllGraphs <- function(itemsList, period) {     print(length(itemsList))     for (i in 1:length(itemsList)) {         print(i)         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
drawAllGraphs <- function(itemsList, period) {     print(length(itemsList))     for (i in 1:length(itemsList)) {         print(i)         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData()
drawAllGraphs(d, "intraday")
d
drawAllGraphs <- function(itemsList, period) {     print(itemsList)     print(length(itemsList))     for (i in 1:length(itemsList)) {         print(i)         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
le
length(d)
nrow(d)
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
d[1,]
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
d
d[1,]
d[1,].certs
d[1,]$certs
d$certs[1,]
d$certs[1]
cui <- d[1,]
cui
cui$certs
ccc <- cui$certs
ccc
paste("a", ccc, "b")
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         varname <- paste(currentItem$titles, "CertData", period, sep = "")         print(varname)         assign(varname, currentItemData)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
bundCertDataintraday
exists("bundCertDataintraday")
drawAllGraphs <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         varname <- paste("results$", currentItem$titles, "CertData", period, sep = "")         print(varname)         assign(varname, currentItemData)     }     results }
d <- initializeData() drawAllGraphs(d, "intraday")
dx <- drawAllGraphs(d, "intraday")
dx
ccc=list()
append(ccc, "a")
ccc
ccc
ccc[[1]]
ccc = append(ccc, "a")
ccc
drawAllGraphs <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results }
d <- initializeData() dx <- drawAllGraphs(d, "intraday")
dx
dx[[1]]
getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results } drawAllGraphs <- function(itemsList, allData) itemsList <- initializeData() allData <- getAllData(d, "intraday")
allData
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(2, 2)) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(2, 2))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(2, 3))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(3, 2))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(3, 2))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(3) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1)     screen(8) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     screen(screenIndex)     drawCertGraph(graphTitle, inputData) }
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[i,]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } }
drawAllGraphs(itemsList, allData)
itemsList <- initializeData()
allData <- getAllData(d, "intraday")
drawAllGraphs(itemsList, allData)
ncol(allData)
nrow(allData)
allData <- getAllData(d, "intraday")
allData
nrow(allData)
typeof(allData)
allData[,1]
allData[1,1]
allData[1,]
getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results }
allData <- getAllData(d, "intraday")
allData drawAllGraphs(itemsList, allData)
itemsList <- initializeData() allData <- getAllData(d, "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results } itemsList <- initializeData() allData <- getAllData(d, "intraday")
allData <- getAllData(itemsList, "intraday")
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[i,]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } }
drawAllGraphs(itemsList, allData)
v1 <- c(1,2,3)
v2 <- c("a","b","c")
v3 <- list("aa", "bb", 1,2,3)
lx <- list()
lx <- append(lx, v1)
lx
lx <- append(lx, v2)
lx
lx[[1]] <- v1
lx[[2]] <- v2
lx[[3]] <- v3
lx
getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } itemsList <- initializeData() allData <- getAllData(itemsList, "intraday")
allData
allData[[1]]
allData[[2]]
len allData[[2]]
length(allData)
length(allData)
nrow( drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } })
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } }
drawAllGraphs(itemsList, allData)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) }
drawAllGraphs(itemsList, allData)
drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } }
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } }
drawAllGraphs(itemsList, allData)
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } }
allDataWeek <- getAllData(itemsList, "week") drawAllGraphs(itemsList, allDataWeek)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     certItems <- data.frame(titles, certs)     certItems }
itemsList <- initializeData()
v1 <- allData[[1]]
v1$BidQuotes[1,]
v1$AskQuotes[1,]
v1
len(v1)
length(v1)
length(v1$AskQuotes)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     amount <- c(150, 2780, 400, 30, 22)     certItems <- data.frame(titles, certs)     certItems }
itemsList <- initializeData()
v1$AskQuotes[length(v1$AskQuotes), 2]
length(v1$AskQuotes)
v1$AskQuotes[684,]
v1$AskQuotes[683,]
v1$AskQuotes[2,]
v1$AskQuotes[4,]
v1$AskQuotes
v1$AskQuotes
nrow(v1$AskQuotes)
v1$AskQuotes[nrow(v1$AskQuotes),]
v1$AskQuotes[nrow(v1$AskQuotes), 2]
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$AskQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         summaryValue <- summaryValue + (income - outcome)     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     amount <- c(150, 2780, 400, 30, 22)     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } } calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$AskQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         summaryValue <- summaryValue + (income - outcome)     }     summaryValue }
itemsList <- initializeData() allData <- getAllData(itemsList, "intraday") drawAllGraphs(itemsList, allData) allDataWeek <- getAllData(itemsList, "week") drawAllGraphs(itemsList, allDataWeek)
calculateProfit(itemsList, allDataWeek)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     amount <- c(150, 2780, 400, 30, 22)     certItems <- data.frame(titles, certs, prices, amount)     certItems }
itemsList <- initializeData()
calculateProfit(itemsList, allDataWeek)
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$AskQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$BidQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
MyData <- read.csv(file = "c:/Users/internet/Downloads/export20170106001139.csv", header = TRUE, sep = ",")
MyData <- read.csv(file = "c:/Users/internet/Downloads/export20170106001139.csv", header = TRUE, sep = ";")
loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ",")     certDetails }calculateProfit(itemsList, allDataWeek)
loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ",")     certDetails }
loadCertDetails()
loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails }
certDetails <- loadCertDetails()
calculateProfit(itemsList, allDataWeek)
itemsList <- initializeData()
calculateProfit(itemsList, allDataWeek)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(0, 0, 0, 0, 0)     amount <- c(0, 0, 0, 0, 0)     certItems <- data.frame(titles, certs, prices, amount)     certItems }
itemsList <- initializeData()
calculateProfit(itemsList, allDataWeek)
certDetails
certDetails[3,]
certDetails[3,3]
itemsList[1,]
itemsList[1,]$prices
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2] }itemsList[1,]$prices
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2] }
mergeData(itemsList, certDetails)
itemsList
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     itemsList }
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     itemsList }
certDetails <- loadCertDetails() newItemsList <- mergeData(itemsList, certDetails)
newItemsList
mergeData <- function(itemsList, certDetails) {     #adidas     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     #pgn     itemsList[2,]$prices <- certDetails[7, 3]     itemsList[2,]$amount <- certDetails[7, 2]     #pge     itemsList[3,]$prices <- certDetails[6, 3]     itemsList[3,]$amount <- certDetails[6, 2]     #bund     itemsList[4,]$prices <- certDetails[5, 3]     itemsList[4,]$amount <- certDetails[5, 2]     #brent     itemsList[5,]$prices <- certDetails[4, 3]     itemsList[5,]$amount <- certDetails[4, 2]     itemsList }
certDetails <- loadCertDetails() newItemsList <- mergeData(itemsList, certDetails)
calculateProfit(newItemsList, allDataWeek)
