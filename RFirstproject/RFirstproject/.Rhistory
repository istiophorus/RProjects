help
help('json')
??json
install.packages("rjson")
.libPaths
.libPaths()
library(jsonlite)
a=12
a
adidas <- fromJSON("https://www.ingturbo.pl/services/underlying/adidas/chart?period=week")
adidas
getIngData = function(symbol, period) {     resource=paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period) }
getIngData("adidas", "week")
getIngData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period)     fromJSON(resource) }
getIngData("adidas", "week")
getIngData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period)     print(resource)     fromJSON(resource) }
getIngData("adidas", "week")
getIngData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) }
getIngData("adidas", "week")
adidasWeek = getIngData("adidas", "week")
adidasWeek = getIngData("adidas", "week")adidasCertIntraday <- getIngData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngData("PLINGNV04713", "intraday") bundCertIntraday <- getIngData("PLINGNV00497 ", "intraday")
adidasCertIntraday <- getIngData("PLINGNV14787", "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/underlying/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497 ", "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday")
adidasCertIntraday
adidasCertIntraday["$BidQuotes"]
adidasCertIntraday[$BidQuotes]
adidasCertIntraday[BidQuotes]
adidasCertIntraday["BidQuotes"]
adidasCertIntraday["AskQuotes"]
adidasBid <- adidasCertIntraday["BidQuotes"][,2]
adidasCertIntraday["BidQuotes"][,2]
adidasCertIntraday["BidQuotes"]
q<-adidasCertIntraday["BidQuotes"]
q
q.BidQuotes
q["BidQuotes"]
q.BidQuotes
q$BidQuotes
adidasBid <- adidasCertIntraday$BidQuotes
adida
adidasBid
adidasAsk <- adid
adidasAsk <- adidasCertIntraday$ AskQuotes
adidasAsk <- adidasCertIntraday$AskQuotes
adidasAs
adidasAsk
adidasAsk[,2]
plot(adidasAsk[,2], type="o", col="green")
plot(adidasAsk[,2], col="green")
plot(adidasAsk[,2], col="green")
plot(adidasAsk[,2], type="l", col="green")
lines(adidasBid[,2], type="l", col="red")
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     plot(certAsk[, 2], type = "o", col = "green")     lines(adidasBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     plot(certAsk[, 2], type = "l", col = "green")     lines(adidasBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     plot(certAsk[, 2], type = "l", col = "green")     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
adida
adi
adida
adidasAsk
adidasAsk[1,]
adidasAsk[,1]
adidasAsk[,1]/1000.0
adidasAsk[,3] <- adidasAsk[,1]/1000.0
adidasAsk[,3] = adidasAsk[,1]/1000.0
adidasAsk[,1]/1000.0
adidasAsk$3 = adidasAsk[,1]/1000.0
adidasAsk$calc = adidasAsk[,1]/1000.0
type(adi)
type(adidasAsk)
typeof(adidasAsk)
typeof(adidasAsk[1,])
adidasAsk[1,]
adidasAsk[,1]
adidasAsk
adidasBid
typeof(adidasBid[1,])
typeof(adidasBid[,1])
typeof(adidasBid)
cars <- c(1, 3, 6, 4, 9)
trucks <- c(2, 5, 4, 5, 12)
g_range <- range(0, cars, trucks)
g_range
range(cars, trucks)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- rnage(certAsk, certBid, ylim = certRange)     plot(certAsk[, 2], type = "l", col = "green")     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid, ylim = certRange)     plot(certAsk[, 2], type = "l", col = "green")     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid)     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk, certBid)     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[,2], certBid[,2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) }
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("pgn", pgnCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("adidas", adidasCertIntraday)
drawCertGraph("pge", pgeCertIntraday)
drawCertGraph("bund", bundCertIntraday)
adidasInfo = c("adidas", "PLINGNV14787")
as <- list()
as[[0]]<-0
as[[1]]<-0
initializeData <- function() {     adidasInfo <- c("adidas", "PLINGNV14787")     pgnInfo <- c("pgn", "PLINGNV04713")     pgeInfo <- c("pge", "PLINGNV16725")     bundInfo <- c("bund", "PLINGNV00497")     certItems <- list()     certItems[[1]] <- adidasInfo     certItems[[2]] <- pgnInfo     certItems[[3]] <- pgeInfo     certItems[[4]] <- bundInfo }
initializeData <- function() {     adidasInfo <- c("adidas", "PLINGNV14787")     pgnInfo <- c("pgn", "PLINGNV04713")     pgeInfo <- c("pge", "PLINGNV16725")     bundInfo <- c("bund", "PLINGNV00497")     certItems <- list()     certItems[[1]] <- adidasInfo     certItems[[2]] <- pgnInfo     certItems[[3]] <- pgeInfo     certItems[[4]] <- bundInfo     certItems }
()
initializeData()
drawAllGraphs <- function(itemsList) {     for (i in 1:seq_le(itemsList)) {         print(i)     } }
d <- initializeData()
draw
drawAllGraphs(d)
drawAllGraphs <- function(itemsList) {     for (i in 1:seq_len(itemsList)) {         print(i)     } }
drawAllGraphs(d)
seq_len(d)
d
typeof(d)
d[[1]]
typeof(d[[1]])
x <- d[[1]]
c
x
x[0]
x[1]
x[2]
length(d)
drawAllGraphs <- function(itemsList) {     for (i in 1:length(itemsList)) {         print(i)     } }
drawAllGraphs(d)
is.nu
is.null(d[[1]])
is.null(x)
is.null(x[3])
is.null(x[1])
x[1]
x[2]
x[3]
x[3] <- "k"
x[3] <- null
x[3] <- NULL
x[3] = NULL
typeof(x[4])
z <- c(1, 1, "ll")
zz
z
z <- c(1, 1, ll)
z <- c(1, 1, 11)
z
initializeData <- function() {     adidasInfo <- data.frame("adidas", "PLINGNV14787")     pgnInfo <- data.frame("pgn", "PLINGNV04713")     pgeInfo <- data.frame( "pge", "PLINGNV16725")     bundInfo <- data.frame("bund", "PLINGNV00497")     certItems <- list()     certItems[[1]] <- adidasInfo     certItems[[2]] <- pgnInfo     certItems[[3]] <- pgeInfo     certItems[[4]] <- bundInfo     certItems }
d <- initializeData()
d
d[[4]]
x <- d[[1]]
is.null(x[3])
is.undefined(x[3])
class(x[1])
class(x[2])
typeof(x[2])
typeof(x[1])
x[1]
f=x[1]
typeof(f)
f
f
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems }
d <- initializeData()
d
typeof(d)
typeof(d[1])
typeof(d[[1]])
d[1]
d[,1]
d[1,]
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems }
d[1,]
row=d[1,]
row
typeof(row)
typeof(row)
row
typeof(row)
row[1]
typeof(row[1])
typeof(row[1,])
row[1]
(row[1])[1]
row[2]
row[3]
names(row)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     values <- c(NULL, NULL, NULL, NULL)     certItems <- data.frame(titles, certs)     certItems }
d=initializeData()
d
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     values <- c(NULL, NULL, NULL, NULL)     certItems <- data.frame(titles, certs, values)     certItems }
d=initializeData()
as=123
as
$("as")
get("as")
set("as", 456)
assign("as", 456)
as
adidasAsk
assign("as", adidasAsk)
as
remove(as)
as
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems }
assign("asstest", d)
asstest
exists("asstest")
remove("asstest")
exists("asstest")
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } drawAllGraphs <- function(itemsList, period) {     for (i in 1:length(itemsList)) {         currentItem = items[[i]]         print(currentItem)         currentItemData <- getIngCertData(currentItem.certs, period)     } }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } drawAllGraphs <- function(itemsList, period) {     for (i in 1:length(itemsList)) {         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } } d <- initializeData() drawAllGraphs(d, "intraday") #drawCertGraph("adidas", adidasCertIntraday) #drawCertGraph("pgn", pgnCertIntraday) #drawCertGraph("pge", pgeCertIntraday) #drawCertGraph("bund", bundCertIntraday)
drawAllGraphs <- function(itemsList, period) {     print(length(itemsList))     for (i in 1:length(itemsList)) {         print(i)         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
drawAllGraphs <- function(itemsList, period) {     print(length(itemsList))     for (i in 1:length(itemsList)) {         print(i)         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData()
drawAllGraphs(d, "intraday")
d
drawAllGraphs <- function(itemsList, period) {     print(itemsList)     print(length(itemsList))     for (i in 1:length(itemsList)) {         print(i)         currentItem = items[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
le
length(d)
nrow(d)
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[[i]]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
d[1,]
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         #currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem.certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
d
d[1,]
d[1,].certs
d[1,]$certs
d$certs[1,]
d$certs[1]
cui <- d[1,]
cui
cui$certs
ccc <- cui$certs
ccc
paste("a", ccc, "b")
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
drawAllGraphs <- function(itemsList, period) {     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         varname <- paste(currentItem$titles, "CertData", period, sep = "")         print(varname)         assign(varname, currentItemData)     } }
d <- initializeData() drawAllGraphs(d, "intraday")
bundCertDataintraday
exists("bundCertDataintraday")
drawAllGraphs <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         varname <- paste("results$", currentItem$titles, "CertData", period, sep = "")         print(varname)         assign(varname, currentItemData)     }     results }
d <- initializeData() drawAllGraphs(d, "intraday")
dx <- drawAllGraphs(d, "intraday")
dx
ccc=list()
append(ccc, "a")
ccc
ccc
ccc[[1]]
ccc = append(ccc, "a")
ccc
drawAllGraphs <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results }
d <- initializeData() dx <- drawAllGraphs(d, "intraday")
dx
dx[[1]]
getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } adidasWeek <- getIngBaseData("adidas", "week") adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results } drawAllGraphs <- function(itemsList, allData) itemsList <- initializeData() allData <- getAllData(d, "intraday")
allData
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(2, 2)) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(2, 2))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(2, 3))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(3, 2))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     split.screen(c(3, 2))     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1)) # split display into two screens     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(1) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screen(3) # prepare screen 1 for output     plot(10:1)     screen(4) # prepare screen 4 for output     plot(10:1)     screen(8) # prepare screen 4 for output     plot(10:1) }
drawAllGraphs(itemsList, allData)
drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     screen(screenIndex)     drawCertGraph(graphTitle, inputData) }
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[i,]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } }
drawAllGraphs(itemsList, allData)
itemsList <- initializeData()
allData <- getAllData(d, "intraday")
drawAllGraphs(itemsList, allData)
ncol(allData)
nrow(allData)
allData <- getAllData(d, "intraday")
allData
nrow(allData)
typeof(allData)
allData[,1]
allData[1,1]
allData[1,]
getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results }
allData <- getAllData(d, "intraday")
allData drawAllGraphs(itemsList, allData)
itemsList <- initializeData() allData <- getAllData(d, "intraday")
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results <- append(results, currentItemData)     }     results } itemsList <- initializeData() allData <- getAllData(d, "intraday")
allData <- getAllData(itemsList, "intraday")
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[i,]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } }
drawAllGraphs(itemsList, allData)
v1 <- c(1,2,3)
v2 <- c("a","b","c")
v3 <- list("aa", "bb", 1,2,3)
lx <- list()
lx <- append(lx, v1)
lx
lx <- append(lx, v2)
lx
lx[[1]] <- v1
lx[[2]] <- v2
lx[[3]] <- v3
lx
getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "green", ylim = certRange)     lines(certBid[, 2], type = "l", col = "red")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } itemsList <- initializeData() allData <- getAllData(itemsList, "intraday")
allData
allData[[1]]
allData[[2]]
len allData[[2]]
length(allData)
length(allData)
nrow( drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } })
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)     } }
drawAllGraphs(itemsList, allData)
drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) }
drawAllGraphs(itemsList, allData)
drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } }
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } }
drawAllGraphs(itemsList, allData)
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } }
allDataWeek <- getAllData(itemsList, "week") drawAllGraphs(itemsList, allDataWeek)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     certItems <- data.frame(titles, certs)     certItems }
itemsList <- initializeData()
v1 <- allData[[1]]
v1$BidQuotes[1,]
v1$AskQuotes[1,]
v1
len(v1)
length(v1)
length(v1$AskQuotes)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     amount <- c(150, 2780, 400, 30, 22)     certItems <- data.frame(titles, certs)     certItems }
itemsList <- initializeData()
v1$AskQuotes[length(v1$AskQuotes), 2]
length(v1$AskQuotes)
v1$AskQuotes[684,]
v1$AskQuotes[683,]
v1$AskQuotes[2,]
v1$AskQuotes[4,]
v1$AskQuotes
v1$AskQuotes
nrow(v1$AskQuotes)
v1$AskQuotes[nrow(v1$AskQuotes),]
v1$AskQuotes[nrow(v1$AskQuotes), 2]
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$AskQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         summaryValue <- summaryValue + (income - outcome)     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     amount <- c(150, 2780, 400, 30, 22)     certItems <- data.frame(titles, certs)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } } calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$AskQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         summaryValue <- summaryValue + (income - outcome)     }     summaryValue }
itemsList <- initializeData() allData <- getAllData(itemsList, "intraday") drawAllGraphs(itemsList, allData) allDataWeek <- getAllData(itemsList, "week") drawAllGraphs(itemsList, allDataWeek)
calculateProfit(itemsList, allDataWeek)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(16.72, 1.82, 2.55, 119.73, 85.70)     amount <- c(150, 2780, 400, 30, 22)     certItems <- data.frame(titles, certs, prices, amount)     certItems }
itemsList <- initializeData()
calculateProfit(itemsList, allDataWeek)
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$AskQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$AskQuotes[nrow(currentItemData$BidQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
calculateProfit(itemsList, allDataWeek)
MyData <- read.csv(file = "c:/Users/internet/Downloads/export20170106001139.csv", header = TRUE, sep = ",")
MyData <- read.csv(file = "c:/Users/internet/Downloads/export20170106001139.csv", header = TRUE, sep = ";")
loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ",")     certDetails }calculateProfit(itemsList, allDataWeek)
loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ",")     certDetails }
loadCertDetails()
loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails }
certDetails <- loadCertDetails()
calculateProfit(itemsList, allDataWeek)
itemsList <- initializeData()
calculateProfit(itemsList, allDataWeek)
initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(0, 0, 0, 0, 0)     amount <- c(0, 0, 0, 0, 0)     certItems <- data.frame(titles, certs, prices, amount)     certItems }
itemsList <- initializeData()
calculateProfit(itemsList, allDataWeek)
certDetails
certDetails[3,]
certDetails[3,3]
itemsList[1,]
itemsList[1,]$prices
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2] }itemsList[1,]$prices
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2] }
mergeData(itemsList, certDetails)
itemsList
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     itemsList }
mergeData <- function(itemsList, certDetails) {     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     itemsList }
certDetails <- loadCertDetails() newItemsList <- mergeData(itemsList, certDetails)
newItemsList
mergeData <- function(itemsList, certDetails) {     #adidas     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     #pgn     itemsList[2,]$prices <- certDetails[7, 3]     itemsList[2,]$amount <- certDetails[7, 2]     #pge     itemsList[3,]$prices <- certDetails[6, 3]     itemsList[3,]$amount <- certDetails[6, 2]     #bund     itemsList[4,]$prices <- certDetails[5, 3]     itemsList[4,]$amount <- certDetails[5, 2]     #brent     itemsList[5,]$prices <- certDetails[4, 3]     itemsList[5,]$amount <- certDetails[4, 2]     itemsList }
certDetails <- loadCertDetails() newItemsList <- mergeData(itemsList, certDetails)
calculateProfit(newItemsList, allDataWeek)
refreshAllDataAndCalculateprofit <- function() {     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday") }
library(jsonlite) getIngCertData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData = function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     titles <- c("adidas", "pgn", "pge", "bund", "brent")     certs <- c("PLINGNV14787", "PLINGNV04713", "PLINGNV16725", "PLINGNV00497", "PLINGNV12963")     prices <- c(0, 0, 0, 0, 0)     amount <- c(0, 0, 0, 0, 0)     certItems <- data.frame(titles, certs, prices, amount)     certItems } getAllData <- function(itemsList, period) {     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- getIngCertData(currentItem$certs, period)         results[[i]] <- currentItemData     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)         screenIndex <- screenIndex + 1     } } calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue } loadCertDetails <- function() {     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     #adidas     itemsList[1,]$prices <- certDetails[3, 3]     itemsList[1,]$amount <- certDetails[3, 2]     #pgn     itemsList[2,]$prices <- certDetails[7, 3]     itemsList[2,]$amount <- certDetails[7, 2]     #pge     itemsList[3,]$prices <- certDetails[6, 3]     itemsList[3,]$amount <- certDetails[6, 2]     #bund     itemsList[4,]$prices <- certDetails[5, 3]     itemsList[4,]$amount <- certDetails[5, 2]     #brent     itemsList[5,]$prices <- certDetails[4, 3]     itemsList[5,]$amount <- certDetails[4, 2]     itemsList } refreshAllDataAndCalculateprofit <- function() {     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday") }
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit <- function() {     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday")     calculateProfit(newItemsList, allData) }
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit <- function() {     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday")     certDetails <- loadCertDetails()     newItemsList <- mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) }
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
calculateProfit <- function(itemsList, allData) {     summaryValue <- 0     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         print(lastValue)         outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)         income <- lastValue * currentItem$amount * (1 - 0.0038)         bilans <- income - outcome         print(bilans)         summaryValue <- summaryValue + bilans     }     summaryValue }
refreshAllDataAndCalculateprofit()
rcb <- fromJSON("https://www.rcb.at/en/produkt/factor/?ID_NOTATION=68555282&ISIN=AT0000A0WJH0")
library(httr)
install.packages("httr")
install.packages("httr")
req <- POST("http://www.biznesradar.pl/get-quotes-json/",   body = 'oid:6793 range:1d type:lin without_operations:0 currency_exchange:0')
library(httr)
req <- POST("http://www.biznesradar.pl/get-quotes-json/",   body = 'oid:6793 range:1d type:lin without_operations:0 currency_exchange:0')
stop_for_status(req)
jsonText <- content(req, "text")
jsonText
jsonText <- content(req)
jsonText 
jsonText <- content(req, "text")
jsonText 
date()
as.Date(date(),  format = "%y-%m-%d")
date()
dd <- date()
as.Date(dd,  format = "%y-%m-%d")
as.Date(dd)
as.Date(dd,  format = "%y-%m-%d")
dates <- c("05/27/84", "07/07/05")
betterDates <- as.Date(dates,  format = "%m/%d/%y")
betterDates 
betterDates <- as.Date(date(),  format = "%m/%d/%y")
betterDates 
lct <- Sys.getlocale("LC_TIME");
Sys.setlocale("LC_TIME", "C")
betterDates <- as.Date(date(),  format = "%m/%d/%y")
betterDates 
date()
$a <- date()
a <- date()
typeof(a)
as.Date(date(), format = "%m/%d/%y")
as.Date(32768, origin = "1900-01-01")
format(Sys.Date(), "%a %b %d")
Sys.Date()
as.Data(Sys.Date(), "%y-%m-%d")
as.Data(Sys.Date(), format = "%y-%m-%d")
as.Date(Sys.Date(), format = "%y-%m-%d")
getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } as.Date(Sys.Date(), format = "%y-%m-%d")
getToday()
getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue,"&instrumentType=SHARE&disableRedirects=true", sep = "") }
getWyborczaUrl("RCFL3OIL", getToday())
getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     resource }
getWyborczaUrl("RCFL3OIL", getToday())
hh<-getWyborczaUrl("RCFL3OIL", getToday())
read.csv(file = hh, header = FALSE, sep = ",")
data <- read.csv(file = hh, header = FALSE, sep = ",")
getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data }data <- read.csv(file = hh, header = FALSE, sep = ",")
getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data }
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday")     certDetails <- loadCertDetails()     newItemsList <- mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList <- initializeData()     allDataWeek <- getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
install.packages(RCurl)
install.packages("RCurl")
install.packages("png")
install.packages("png")library(png) library(bitops) library(RCurl) myurl <- "http://stooq.com/c/?s=rcwhtaopen.pl&c=3y&t=l&a=ln" my_image <- readPNG(getURLContent(myurl)) plot(0, type = 'n', xlim = 0:1, ylim = 0:1, main = "Not the best use, but this gives the idea") rasterImage(my_image, -0.5, -0.3, 1.5, 1.3)
library(png)
library(bitops)
library(RCurl)
myurl <- "http://stooq.com/c/?s=rcwhtaopen.pl&c=3y&t=l&a=ln"
my_image <- readPNG(getURLContent(myurl))
plot(0, type = 'n', xlim = 0:1, ylim = 0:1, main = "Not the best use, but this gives the idea")
rasterImage(my_image, -0.5, -0.3, 1.5, 1.3)
rasterImage(my_image, 0, 0, 1, 1)
initializeItemsData <- function() {     data <- read.csv(file = "d:/GitHub/graphInput.csv", header = TRUE, sep = ",")     data }
getStooqGraphUrl <- function(symbol, period) {     resource <- paste("http://stooq.com/c/?s=", symbol, "&c=", period, "&t=l&a=ln")     resource }
initializeData()
initializeGraphItemsData <- function() {     data <- read.csv(file = "d:/GitHub/graphInput.csv", header = TRUE, sep = ",")     data }
initializeGraphItemsData()
library(png) library(bitops) library(RCurl) initializeGraphItemsData <- function() {     data = read.csv(file = "d:/GitHub/graphInput.csv", header = TRUE, sep = ",")     data } getStooqGraphUrl <- function(symbol, period) {     resource = paste("http://stooq.com/c/?s=", symbol, "&c=", period, "&t=l&a=ln", sep="")     resource } drawSingleImageOnScreen <- function(screenIndex, currentImage, title) {     print("[drawSingleImageOnScreen]")     print(title)     print(screenIndex)     screen(screenIndex)     plot(0, type = 'n', xlim = 0:1, ylim = 0:1, main = title, axes = FALSE)     rasterImage(currentImage, 0, 0, 1, 1) } drawDownloadedGraphs <- function(itemsList, imagesAndTitles) {     print("[drawDownloadedGraphs]")     par(bg = "white") # erase.screen() will appear not to work                       # if the background color is transparent      # (as it is by default on most devices).     par(mar = c(1, 1, 1, 1))     par("mar")     # prepare screens     split.screen(c(3, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2)      split.screen(c(1, 3), screen = 3)      images = imagesAndTitles[[1]]     titles = imagesAndTitles[[2]]     screenIndex = 4     for (i in 1:length(images)) {         print(i)         currentImage = images[[i]]         currentTitle = titles[[i]]         print(currentTitle)         print(length(currentImage))         drawSingleImageOnScreen(screenIndex, currentImage, currentTitle)         screenIndex = screenIndex + 1     } } getSingleImage <- function(imageUrl) {     image = readPNG(getURLContent(imageUrl))     image } getImages <- function(itemsData, periodSymbol) {     print("[getImages]")     si = nrow(itemsData)     results = list()     imageIndex = 1     titles = list()     for (i in 1:si) {         currentItem = itemsData[i,]         print(currentItem)         if (currentItem$getGraph) {             itemUrl = getStooqGraphUrl(currentItem$symbol, periodSymbol)             print(itemUrl)             nextImage = getSingleImage(itemUrl)             results[[imageIndex]] <- nextImage             titles[[imageIndex]] <- currentItem$symbol             imageIndex = imageIndex + 1         }     }     res = list()     res[[1]] = results     res[[2]] = titles     res }
itemsData <- initializeGraphItemsData() imagesWithTitles <- getImages(itemsData, "10d") dev.off() drawDownloadedGraphs(itemsData, imagesWithTitles)
itemsData <- initializeGraphItemsData() imagesWithTitles <- getImages(itemsData, "10d") dev.off() drawDownloadedGraphs(itemsData, imagesWithTitles)
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday")     certDetails <- loadCertDetails()     newItemsList <- mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList <- initializeData()     allData <- getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList <- initializeData()     allDataWeek <- getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
drawAllWeekGraphs()
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
itemsList <- initializeData() allData <- getAllData(itemsList, "intraday") drawAllGraphs(itemsList, allData)
dev.off()
drawAllGraphs(itemsList, allData)
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } #adidasWeek <- getIngBaseData("adidas", "week") #adidasCertIntraday <- getIngCertData("PLINGNV14787", "intraday") #pgeCertIntraday <- getIngCertData("PLINGNV16725", "intraday") #pgnCertIntraday <- getIngCertData("PLINGNV04713", "intraday") #bundCertIntraday <- getIngCertData("PLINGNV00497", "intraday") drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit() drawAllWeekGraphs() itemsList <- initializeData() allData <- getAllData(itemsList, "intraday") drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)     par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
drawAllGraphs(itemsList, allData)
layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)
par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))
par(bg = "white")
graphics.off()
par(bg = "white")
par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))
layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)
drawAllGraphs(itemsList, allData)
plot.new()
drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
itemsList <- initializeData() allData <- getAllData(itemsList, "intraday") drawAllGraphs(itemsList, allData)
itemsList <- initializeData() allData <- getAllData(itemsList, "intraday") drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     frame()     par(bg = "white") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     #layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)     #par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     frame()     par(bg = "red") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     #layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)     #par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     frame()     par(bg = "green") # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     #layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)     #par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     #split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     frame()     par(bg = "red", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     #layout(matrix(c(1), 1, 1, byrow = TRUE), respect = TRUE)     #par(mfrow = c(1, 1), mar = c(1, 1, 1, 1))     #split.screen(c(1, 1))     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
drawAllGraphs(itemsList, allData)
close.screen(4)
close.screen(4, all.screens = TRUE)
close.screen(4)
close.screen(4, all.screens = TRUE)drawAllGraphs(itemsList, allData)
drawAllGraphs(itemsList, allData)
drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "red", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } }
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
drawAllGraphs(itemsList, allData)
library(png) library(bitops) library(RCurl) initializeGraphItemsData <- function() {     data = read.csv(file = "d:/GitHub/graphInput.csv", header = TRUE, sep = ",")     data } getStooqGraphUrl <- function(symbol, period) {     resource = paste("http://stooq.com/c/?s=", symbol, "&c=", period, "&t=l&a=ln", sep="")     resource } drawSingleImageOnScreen <- function(screenIndex, currentImage, title) {     print("[drawSingleImageOnScreen]")     print(title)     print(screenIndex)     screen(screenIndex)     plot(0, type = 'n', xlim = 0:1, ylim = 0:1, main = title, axes = FALSE)     rasterImage(currentImage, 0, 0, 1, 1) } drawDownloadedGraphs <- function(itemsList, imagesAndTitles) {     print("[drawDownloadedGraphs]")     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1))     # prepare screens     split.screen(c(3, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2)      split.screen(c(1, 3), screen = 3)      images = imagesAndTitles[[1]]     titles = imagesAndTitles[[2]]     screenIndex = 4     for (i in 1:length(images)) {         print(i)         currentImage = images[[i]]         currentTitle = titles[[i]]         print(currentTitle)         print(length(currentImage))         drawSingleImageOnScreen(screenIndex, currentImage, currentTitle)         screenIndex = screenIndex + 1     } } getSingleImage <- function(imageUrl) {     image = readPNG(getURLContent(imageUrl))     image } getImages <- function(itemsData, periodSymbol) {     print("[getImages]")     si = nrow(itemsData)     results = list()     imageIndex = 1     titles = list()     for (i in 1:si) {         currentItem = itemsData[i,]         print(currentItem)         if (currentItem$getGraph) {             itemUrl = getStooqGraphUrl(currentItem$symbol, periodSymbol)             print(itemUrl)             nextImage = getSingleImage(itemUrl)             results[[imageIndex]] <- nextImage             titles[[imageIndex]] <- currentItem$symbol             imageIndex = imageIndex + 1         }     }     res = list()     res[[1]] = results     res[[2]] = titles     res }
itemsData <- initializeGraphItemsData() imagesWithTitles <- getImages(itemsData, "10d") drawDownloadedGraphs(itemsData, imagesWithTitles)
drawAllGraphs(itemsList, allData)
drawDownloadedGraphs(itemsData, imagesWithTitles)
is.null(s)
s
s=NULL
is.null(s)
library(png) library(bitops) library(RCurl) initializeGraphItemsData <- function() {     data = read.csv(file = "d:/GitHub/graphInput.csv", header = TRUE, sep = ",")     data } getStooqGraphUrl <- function(symbol, period) {     resource = paste("http://stooq.com/c/?s=", symbol, "&c=", period, "&t=l&a=ln", sep="")     resource } drawSingleImageOnScreen <- function(screenIndex, currentImage, title) {     print("[drawSingleImageOnScreen]")     print(title)     print(screenIndex)     screen(screenIndex)     plot(0, type = 'n', xlim = 0:1, ylim = 0:1, main = title, axes = FALSE)     rasterImage(currentImage, 0, 0, 1, 1) } drawDownloadedGraphs <- function(itemsList, imagesAndTitles) {     print("[drawDownloadedGraphs]")     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1))     # prepare screens     split.screen(c(3, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2)      split.screen(c(1, 3), screen = 3)      images = imagesAndTitles[[1]]     titles = imagesAndTitles[[2]]     screenIndex = 4     for (i in 1:length(images)) {         print(i)         currentImage = images[[i]]         currentTitle = titles[[i]]         print(currentTitle)         print(length(currentImage))         drawSingleImageOnScreen(screenIndex, currentImage, currentTitle)         screenIndex = screenIndex + 1     } } getSingleImage <- function(imageUrl) {     image = readPNG(getURLContent(imageUrl))     image } getImages <- function(itemsData, periodSymbol) {     print("[getImages]")     si = nrow(itemsData)     results = list()     imageIndex = 1     titles = list()     for (i in 1:si) {         currentItem = itemsData[i,]         print(currentItem)         if (currentItem$getGraph) {             if (is.null(periodSymbol)) {                 currentPeriodSymbol = currentItem$graphPeriod             }             else {                 currentPeriodSymbol = periodSymbol             }             itemUrl = getStooqGraphUrl(currentItem$symbol, currentPeriodSymbol)             print(itemUrl)             nextImage = getSingleImage(itemUrl)             results[[imageIndex]] <- nextImage             titles[[imageIndex]] <- currentItem$symbol             imageIndex = imageIndex + 1         }     }     res = list()     res[[1]] = results     res[[2]] = titles     res }
itemsData <- initializeGraphItemsData()
itemsData
imagesWithTitles <- getImages(itemsData, "10d")
drawDownloadedGraphs(itemsData, imagesWithTitles)
imagesWithTitles <- getImages(itemsData, NULL)
drawDownloadedGraphs(itemsData, imagesWithTitles)
refreshAllDataAndCalculateprofit()
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else {             lastValue <- currentItemData[2,]$V5         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         print(currentItemData)         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             lastValue <- currentItemData[2,]$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) }
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 - 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
itemsList <- initializeData()
itemsList
certDetails = loadCertDetails()
certDetails
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
library(jsonlite) library(XML) library(RCurl) getToday <- function() {     as.Date(Sys.Date(), format = "%y-%m-%d") } getIngCertData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/product/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getIngBaseData <- function(symbol, period) {     resource = paste("https://www.ingturbo.pl/services/underlying/", symbol, "/chart?period=", period, sep = "")     print(resource)     fromJSON(resource) } getWyborczaUrl <- function(symbol, dateValue) {     resource = paste("http://xml.wyborcza.biz/exchangeFlashChartsData.servlet?p5=", symbol, "&p7=ONE_WEEK&p9=", dateValue, "&instrumentType=SHARE&disableRedirects=true", sep = "")     print(resource)     resource } getDataFromWyborcza <- function(symbol) {     resource <- getWyborczaUrl(symbol, getToday())     data <- read.csv(file = resource, header = FALSE, sep = ",")     data } drawCertGraph <- function(graphTitle, inputData) {     certAsk <- inputData$AskQuotes     certBid <- inputData$BidQuotes     certRange <- range(certAsk[, 2], certBid[, 2])     print(certRange)     plot(certAsk[, 2], type = "l", col = "blue", ylim = certRange)     lines(certBid[, 2], type = "l", col = "darkgray")     title(main = graphTitle) } drawCertGraphOnScreen <- function(screenIndex, graphTitle, inputData) {     print(screenIndex)     screen(screenIndex)     drawCertGraph(graphTitle, inputData) } initializeData <- function() {     certItems <- read.csv(file = "d:/GitHub/definitions.csv ", header = TRUE, sep = ",")     certItems } getDataFromRcb <- function(currentItem) {     print("[getDataFromRcb]")     print(currentItem)     txt <- getURL(currentItem$sourceUrl)     pos <- regexpr("valueFilter:priceFilter2\">(.+)</span><br/>", txt)     result <- list()     buyPrice <- 0     if (pos[[1]] >= 0) {         subt <- substring(txt, pos + 26, pos + 26 + 20)          pos2 <- regexpr("</span><br/>", subt)         if (pos2[[1]] > 0) {             valueTxt <- substr(subt, 0, pos2 - 1)             valueTxt <- gsub(",", ".", valueTxt)             buyPrice <- as.numeric(valueTxt)         }         else {             print("[b]")             print(subt)             print(pos2)         }     }     else { print("[a]") }     result$buyPrice <- buyPrice     result } getAllData <- function(itemsList, period) {     print("[getAllData]")     results <- list()     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$source == 'ing') {             currentItemData <- getIngCertData(currentItem$certs, period)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'wyb') {             currentItemData <- getDataFromWyborcza(currentItem$certs)             results[[i]] <- currentItemData         }         else if (currentItem$source == 'rcb') {             currentItemData <- getDataFromRcb(currentItem)             results[[i]] <- currentItemData         }         else {             results[[i]] <- currentItem$source         }     }     results } drawAllGraphs <- function(itemsList, allData) {     close.screen(4, all.screens = TRUE)     par(bg = "white", mfrow = c(1, 1), mar = c(1, 1, 1, 1)) # erase.screen() will appear not to work                   # if the background color is transparent                    # (as it is by default on most devices).     # prepare screens     split.screen(c(2, 1))     split.screen(c(1, 3), screen = 1)     split.screen(c(1, 3), screen = 2) # now split the bottom half into 3     screenIndex = 3     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         if (currentItem$drawGraph) {             if (currentItem$source == 'ing') {                 currentItemData <- allData[[i]]                 drawCertGraphOnScreen(screenIndex, currentItem$titles, currentItemData)                 screenIndex <- screenIndex + 1             }             else if (currentItem$source == 'wyb') {             }         }     } } calculateProfit <- function(itemsList, allData) {     print("[calculateProfit]")     summaryValue <- 0     ingIndex <- 1     for (i in 1:nrow(itemsList)) {         print(i)         currentItem = itemsList[i,]         print(currentItem)         currentItemData <- allData[[i]]         if (currentItem$source == 'ing') {             lastValue <- currentItemData$BidQuotes[nrow(currentItemData$BidQuotes), 2]         }         else if (currentItem$source == 'wyb')         {             lastValue <- currentItemData[2,]$V5         }         else if (currentItem$source == 'rcb') {             #print(currentItemData)             lastValue <- currentItemData$buyPrice         }         print(lastValue)         if (is.numeric(lastValue)) {             outcome <- currentItem$prices * currentItem$amount * (1 + 0.0038)             income <- lastValue * currentItem$amount * (1 - 0.0038)             bilans <- income - outcome             print(bilans)             print(bilans / outcome)             summaryValue <- summaryValue + bilans         }     }     summaryValue } loadCertDetails <- function() {     print("[loadCertDetails]")     certDetails <- read.csv(file = "d:/GitHub/export.csv", header = TRUE, sep = ";")     certDetails } mergeData <- function(itemsList, certDetails) {     print("[mergeData]")     buyPriceIndex = 3     amountIndex = 2     newItemsList <- list()     for (ix in 1:nrow(itemsList)) {         print(ix)         currentItem = itemsList[ix,]         currentItem$prices <- certDetails[currentItem$rowIndex, buyPriceIndex]         currentItem$amount <- certDetails[currentItem$rowIndex, amountIndex]         print(currentItem)         itemsList[ix,] <- currentItem     }     itemsList } refreshAllDataAndCalculateprofit <- function() {     print("[refreshAllDataAndCalculateprofit]")     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     certDetails = loadCertDetails()     newItemsList = mergeData(itemsList, certDetails)     calculateProfit(newItemsList, allData) } drawAllIntradayGraphs <- function() {     itemsList = initializeData()     allData = getAllData(itemsList, "intraday")     drawAllGraphs(itemsList, allData) } drawAllWeekGraphs <- function() {     itemsList = initializeData()     allDataWeek = getAllData(itemsList, "week")     drawAllGraphs(itemsList, allDataWeek) } refreshAllDataAndCalculateprofit()
